{"name":"Osm-indoormark-demo-app","tagline":"Sample application using the indoormark=beacon tag ","body":" \r\n# osm-indoormark-demo-app\r\n\r\nThis is a demo app showing how to use the [indoormark tag](http://wiki.openstreetmap.org/wiki/Tag:indoormark%3Dbeacon) specification at Open Street Map.\r\n\r\nThe application has been developed under the scope of the [Ubica2](http://smartprojects.zed.com/?project=p1) project by the [Smart Projects Group](http://smartprojects.zed.com) at Zed.\r\n\r\n## Build\r\n\r\nThe source code is written in QT 5.5 and runs on Android devices. To build the application, use QT Creator and configure the project for the Android platform.\r\n\r\nRequires:\r\n\r\n- QT 5.5\r\n- [QZxing library](http://sourceforge.net/projects/qzxing/)\r\n\r\n\r\nIt has been tested on the following devices\r\n\r\n- Sony Xperia Z1 Compact\r\n- Asus Memo Pad 7 (k013)\r\n\r\n## Usage\r\n\r\nThe application uses the camera to scan QR codes. Neither iBeacons nor NFC are detected. You need to print at least one QR already tagged in OSM as explained later. \r\nTo use the app, press the camera button and point to a QR code tagged in OSM as explained in the mentioned page. The QR should have been generated using an unique identificator to pruduce only one result in the query. If the QR is found, the map will show you the position where the QR beacon is located.\r\nFor testing purposes you can print and use this one:\r\n\r\n![QR code image](https://github.com/GlassOceanos/osm-indoormark-demo-app/blob/master/img/123456.png \"Sample QR\")\r\n\r\n## Tagging\r\nPlease refer to the [indoormark tag](http://wiki.openstreetmap.org/wiki/Tag:indoormark%3Dbeacon) definition at Open Street Map to have a complete idea\r\n\r\nUsing indoormark tag it is possible to label several types of indoor beacons such us:\r\n\r\n    ibeacons: they provide proximity location enabling triangulation positioning\r\n    NFC tags: they can provide the coordinate of the current position\r\n    QR codes: as the NFC tags, they can provide a known coordinate.\r\n\r\nThe tag is defined in a similar way as is established for seamark and airmark tags. To this end, the key/value indoormark=beacon is used. Furthermore, we can extend a beacon with a number of attributes that allow accommodate all the information necessary.\r\n\r\nThe scheme devised as follows:\r\n\r\n\r\n\t|Key |\tValue |\tComment |\tSuitable for\r\n---|---|---|---|---\r\nrequired |\tindoormark \t|beacon \t|Mandatory tag for defining a point which is a beacon \t\t\t\t\t|All\r\nrequired |\tbeacon:type \t|String \t|Distinguisses the type of the beacon: bluetooth, nfc, qr... \t\t\t\t|All\r\noptional |\tbeacon:address \t|String \t|Network address identifier \t\t\t\t\t\t\t\t|ibeacons, NFC\r\noptional |\tbeacon:uuid \t|String \t|Unique identifier given normally for ibeacons \t\t\t\t\t\t|ibeacons, QRs\r\noptional |\tbeacon:major \t|Integer \t|ibeacon major number \t\t\t\t\t\t\t\t\t|ibeacons\r\noptional |\tbeacon:minor \t|Integer \t|ibeacon minor number \t\t\t\t\t\t\t\t\t|ibeacons\r\noptional |\tbeacon:measured |Integer \t|signal strength calibration value of an ibeacon \t\t\t\t\t|ibeacons\r\nrequired |\tlevel \t\t|* \t\t|Level where the beacon is deployed. This is specified by Simple Indoor Tagging \t|all\r\n\r\n\r\nThe only mandatory tag is the indoormark key but it is suggested to add some more information using the other tags shown in the previous table. In addition, the use of the level tag provides compatibility with the specifications written in the Simple Indoor Tagging wiki page. Doing all that, navigation systems could retrieve all the data they need to position the user. For instance, an ibeacon based application should know the major and minor numbers to distinguish any ibeacon. A NFC tag would give its unique address when detected and this value could be use to match an indoormark in Open Street Maps and obtain its coordinates. See the examples below to know how this can be achieved.\r\n\r\n### Examples\r\n\r\nQR beacon\r\n\r\nQR codes can be used to give a unique identifier when scanned. An approach to transform that to a position within a building is to match the unique identifier given by the QR with the item tagged in our OSM map. Doing this, we can get the coordinates and also the level where the QR is placed.\r\n\r\n    indoormark=beacon\r\n    level=0\r\n    beacon:type=QR\r\n    beacon:uuid=123456\r\n\r\nNFC tag\r\n\r\nNFC can be used in a similar way to QR codes. In this case, the address of the NFC is unique and the procedure to obtain the location could use its value to get the coordinates and level from the map.\r\n\r\n    indoormark=beacon\r\n    level=0\r\n    beacon:type=nfc\r\n    beacon:address=11:11:11:11:13\r\n\r\nbluetooth (ibeacon)\r\n\r\nIn the case of an ibeacon, we will need more data in order to make work our triangulation algorithm. Useful information to store is the uuid of the beacon, its major and minor numbers and the signal calibration value (measured)\r\n\r\n    indoormark=beacon\r\n    level=0\r\n    beacon:type=bluetooth\r\n    beacon:uuid=123456789\r\n    beacon:major=1\r\n    beacon:minor=2\r\n    beacon:measured=-56\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}